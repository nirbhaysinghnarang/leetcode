{"id":1002569657,"lang":"python3","lang_name":"Python3","time":"1Â day, 2Â hours","timestamp":1690198143,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1002569657/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"from collections import Counter\n\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n\n        soln = []\n\n        candidates.sort()\n\n        def dfs(index, path_so_far, running_sum):\n            if index>=len(candidates) or running_sum >= target:\n                path_copy = path_so_far.copy()\n                if running_sum == target:\n                    soln.append(path_copy)                \n                return\n\n            for i in range(index, len(candidates)):\n                if i > 0 and candidates[i-1]==candidates[i]:\n                    continue\n                if candidates[i]+running_sum > target:\n                    return \n                if candidates[i] + running_sum <= target:\n                    path_so_far.append(candidates[i])\n                    running_sum += candidates[i]\n                    dfs(i+1, path_so_far, running_sum)\n                    path_so_far.pop()\n                    running_sum -= candidates[i]\n\n        dfs(0,[],0)\n        return soln\n\n            \n\n            \n\n        ","compare_result":"00111101111110011111110111001000111010000100101100100010010110011011010010111100110010010110000000110001011100001010000000100000000000000000000000010000000000000000000000000000","title_slug":"combination-sum-ii","has_notes":false}