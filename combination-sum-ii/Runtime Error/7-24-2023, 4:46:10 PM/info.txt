{"id":1002562076,"lang":"python3","lang_name":"Python3","time":"1 day, 2 hours","timestamp":1690197370,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1002562076/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"from collections import Counter\n\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n\n        soln = []\n\n        candidates.sort()\n\n        def dfs(index, path_so_far, running_sum):\n            if index>=len(candidates) or running_sum > target:\n                path_copy = path_so_far.copy()\n                if not path_copy in soln and running_sum == target:\n                    soln.append(path_copy)\n                    return\n\n            \n            path_so_far.append(candidates[index])\n            running_sum += candidates[index]\n\n            dfs(index+1, path_so_far, running_sum)\n\n            path_so_far.pop()\n            running_sum -= candidates[index]\n\n            dfs(index+1, path_so_far, running_sum)\n\n        dfs(0,[],0)\n        return soln\n\n            \n\n            \n\n        ","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"combination-sum-ii","has_notes":false}