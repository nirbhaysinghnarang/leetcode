{"id":1002570833,"lang":"python3","lang_name":"Python3","time":"1Â day, 2Â hours","timestamp":1690198267,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1002570833/","is_pending":"Not Pending","title":"Combination Sum II","memory":"16.6 MB","code":"from collections import Counter\n\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n\n        soln = []\n\n        candidates.sort()\n\n        def dfs(index, path_so_far, running_sum):\n            if running_sum > target:\n                return \n            \n            if running_sum == target:\n                soln.append(path_so_far.copy())\n                return\n\n            for i in range(index, len(candidates)):\n                if i > index and candidates[i-1]==candidates[i]:\n                    continue\n                elif candidates[i]+running_sum > target:\n                    return \n                elif candidates[i] + running_sum <= target:\n                    path_so_far.append(candidates[i])\n                    running_sum += candidates[i]\n                    dfs(i+1, path_so_far, running_sum)\n                    path_so_far.pop()\n                    running_sum -= candidates[i]\n\n        dfs(0,[],0)\n        return soln\n\n            \n\n            \n\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false}