{"id":1000152544,"lang":"python3","lang_name":"Python3","time":"4 days, 1 hour","timestamp":1689941952,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1000152544/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"20.6 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        f, s = head, head\n\n        while(f and f.next):\n            f = f.next.next\n            s = s.next\n            if (f==s):\n                break\n\n        if not f or not f.next:\n            return None\n\n        s1 = head\n\n        while(s!=s1):\n            s1 = s1.next\n            s = s.next\n\n        return s","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}