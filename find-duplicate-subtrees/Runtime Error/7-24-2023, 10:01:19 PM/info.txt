{"id":1002793986,"lang":"python3","lang_name":"Python3","time":"21 hours, 32 minutes","timestamp":1690216279,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1002793986/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sameTree(self, p, q):\n        if p and q:\n            return p.val == q.val and self.sameTree(p.left, q.left) and self.sameTree(p.right, q.right) \n        return p is q\n\n\n    dupTrees = []\n\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        def helper(root):\n            if not root:\n                return\n\n            if (not root.left and root.right) or (not root.right and root.left):\n                return\n\n            if self.sameTree(root.left, root.right):\n                nonlocal dupTrees\n                dupTrees.append([root.left])\n\n            helper(root.left)\n            helper(root.right)\n\n        helper(root)\n        return dupTrees\n\n\n","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-duplicate-subtrees","has_notes":false}