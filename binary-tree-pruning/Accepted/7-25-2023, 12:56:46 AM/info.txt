{"id":1002946229,"lang":"python3","lang_name":"Python3","time":"18 hours, 36 minutes","timestamp":1690226806,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1002946229/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"16.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        if not root:\n            return root\n\n        lefthas = self.containsOne(root.left)\n        righthas = self.containsOne(root.right)\n        if lefthas:\n            root.left = self.pruneTree(root.left)\n        else:\n            root.left = None\n\n        if righthas:\n            root.right = self.pruneTree(root.right)\n        else:\n            root.right = None\n\n\n        if not lefthas and not righthas and root.val !=1:\n            return None\n        if not lefthas and not righthas and root.val == 1:\n            return root\n\n        return root\n        \n\n\n\n\n    def containsOne(self, root):\n        if not root:\n            return False\n\n        if root.val == 1:\n            return True\n\n        return self.containsOne(root.left) or self.containsOne(root.right)","compare_result":"1111111111111111111111111111111","title_slug":"binary-tree-pruning","has_notes":false}