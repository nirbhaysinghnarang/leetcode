{"id":1002962247,"lang":"python3","lang_name":"Python3","time":"18 hours, 12 minutes","timestamp":1690228250,"status":10,"status_display":"Accepted","runtime":"121 ms","url":"/submissions/detail/1002962247/","is_pending":"Not Pending","title":"Two Sum BSTs","memory":"22.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def twoSumBSTs(self, root1: Optional[TreeNode], root2: Optional[TreeNode], target: int) -> bool:\n\n        inorder1 = self.inorder(root1)\n        inorder2 = self.inorder(root2)\n\n\n        for num in inorder1:\n            com = target - num\n            print(num, com)\n            if self.binarySearch(inorder2, com):\n                return True\n\n        return False\n\n    \n\n    def inorder(self, root):\n        arr = []\n        def dfs(root):\n            if not root:\n                return\n            dfs(root.left)\n            arr.append(root.val)\n            dfs(root.right)\n\n        dfs(root)\n        return arr\n\n\n    def binarySearch(self, arr, target):\n        L, R = 0, len(arr) - 1\n        while L <= R:\n            mid = (L + R) // 2\n            if arr[mid] == target:\n                return True\n            if arr[mid] > target:\n                R = mid - 1\n            else:\n                L = mid + 1\n        return False\n","compare_result":"1111111111111111111","title_slug":"two-sum-bsts","has_notes":false}