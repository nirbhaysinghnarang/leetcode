{"id":1000159999,"lang":"python3","lang_name":"Python3","time":"4 days, 1 hour","timestamp":1689942752,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000159999/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n\n        mid = self.findMid(head)\n        mid_rev = self.reverse(mid)\n        print(mid_rev)\n        s = 0\n\n\n        while(head and mid and head!=mid):\n            s = max(s, head.val+mid.val)\n            head = head.next\n            mid = mid.next\n\n        return s\n\n\n    def findMid(self, head):\n        f, s = head, head\n\n        while(f and f.next):\n            f = f.next.next\n            s = s.next\n\n        return s\n\n\n    def reverse(self, head):\n        prev, curr = None, head\n\n        while curr is not None:\n            nxt = curr.next\n            prev = curr.next\n            curr = nxt\n\n        return prev\n\n\n    ","compare_result":"0010101100100111111000000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false}