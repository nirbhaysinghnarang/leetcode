{"id":994892378,"lang":"python3","lang_name":"Python3","time":"1Â week, 3Â days","timestamp":1689408117,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/994892378/","is_pending":"Not Pending","title":"Permutations II","memory":"N/A","code":"from collections import Counter\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n\n        combs = []\n\n        c = dict(Counter(nums))\n        print(c)\n\n        def dfs(index, path,d):\n            if index==len(nums)-1:\n                combs.append(path.copy())\n                return\n            \n            for (i,num) in enumerate(nums):\n                if i!=index:\n                    dfs(i, path+[num],d)\n\n        dfs(0,[],c)\n        return combs\n\n","compare_result":"000000000000000000000000000000000","title_slug":"permutations-ii","has_notes":false}