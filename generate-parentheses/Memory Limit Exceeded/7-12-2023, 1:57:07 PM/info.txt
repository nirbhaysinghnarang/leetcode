{"id":992507129,"lang":"python3","lang_name":"Python3","time":"1Â week, 6Â days","timestamp":1689150427,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/992507129/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"N/A","code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        combs = []\n        def gen(n, path, numstart, numend):\n            if numstart==n or numend==n:\n                combs.append(\"\".join(path))\n                return\n            edges = ['(' for _ in range(numstart)]+[')' for _ in range(numend)]\n            for edge in edges:\n                if edge=='(':\n                    gen(n+1, path+[edge], numstart+1, numend)\n                else:\n                    gen(n+1, path+[edge], numstart, numend+1)\n                path.pop()\n\n        gen(n, [], 1, 1)\n        return combs\n\n\n            \n\n\n","compare_result":"00000000","title_slug":"generate-parentheses","has_notes":false}