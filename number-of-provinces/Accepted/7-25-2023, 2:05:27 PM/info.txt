{"id":1003383390,"lang":"python3","lang_name":"Python3","time":"5 hours, 27 minutes","timestamp":1690274127,"status":10,"status_display":"Accepted","runtime":"253 ms","url":"/submissions/detail/1003383390/","is_pending":"Not Pending","title":"Number of Provinces","memory":"17.5 MB","code":"class Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n\n        def dfs(node, visited):\n            print(\"node:\", node)\n            if node in visited:\n                return\n            visited.add(node)\n            for (i,n) in enumerate(isConnected[node]):\n                if n==1:\n                    dfs(i, visited)\n\n        provinces = 0\n        visited = set()\n\n        n = len(isConnected)\n        for city in range(n):\n            if city not in visited:\n                dfs(city, visited)\n                provinces+=1\n        \n        return provinces\n\n      \n            \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false}