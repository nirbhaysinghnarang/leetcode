{"id":991664132,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1689064407,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/991664132/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"N/A","code":"class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        Intuition:\n        we know an element appears only once if it is different than both its neighbours\n        so we binary search using the following magix\n        \"\"\"\n\n        l, r = 0, len(nums)-1\n        sz = len(nums)\n        while(l<=r):\n            mid = (l+r)//2\n            elt = nums[mid]\n            if mid!=0 and mid!=sz-1:\n                if elt!=nums[mid-1] and elt!=nums[mid+1]:\n                    return elt\n                #now elt[mid] must either equal elt[mid+1] or elt[mid-1]\n                if(elt[mid]==elt[mid+1]):\n                    left_half = elt[:mid]\n                    right_half=elt[mid+2:]\n                    if(len(left_half)%2!=0):\n                        #answer is in left half\n                        r = mid-1\n                    else:\n                        #answer is in right half\n                        l = mid+1\n                else:\n                    left_half = elt[:mid-1]\n                    right_half = elt[mid+1:]\n                    if(len(left_half)%2!=0):\n                        #answer is in left half\n                        r = mid-1\n                    else:\n                        #answer is in right half\n                        l = mid+1\n\n\n                ","compare_result":"000000000000000","title_slug":"single-element-in-a-sorted-array","has_notes":false}