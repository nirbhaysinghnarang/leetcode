{"id":991665014,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1689064499,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/991665014/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"N/A","code":"class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        \"\"\"\n        Intuition:\n        we know an element appears only once if it is different than both its neighbours\n        so we binary search using the following magix\n        \"\"\"\n        if len(nums)==1:\n            return nums[0]\n        l, r = 0, len(nums)-1\n        sz = len(nums)\n        while(l<=r):\n            mid = (l+r)//2\n            elt = nums[mid]\n            if elt!=nums[mid-1] and elt!=nums[mid+1]:\n                return elt\n            #now elt[mid] must either equal elt[mid+1] or elt[mid-1]\n            if(nums[mid]==nums[mid+1]):\n                left_half = nums[:mid]\n                right_half=nums[mid+2:]\n                if(len(left_half)%2!=0):\n                    r = mid-1\n                else:\n                    l = mid+1\n            else:\n                left_half = nums[:mid-1]\n                right_half = nums[mid+1:]\n                if(len(left_half)%2!=0):\n                    r = mid-1\n                else:\n                    l = mid+1\n\n\n                ","compare_result":"111000000000000","title_slug":"single-element-in-a-sorted-array","has_notes":false}