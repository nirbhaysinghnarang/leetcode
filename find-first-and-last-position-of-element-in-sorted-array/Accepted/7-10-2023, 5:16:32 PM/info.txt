{"id":990927180,"lang":"python3","lang_name":"Python3","time":"2 weeks, 1 day","timestamp":1688989592,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/990927180/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"17.8 MB","code":"class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        if not nums:\n            return [-1,-1]\n\n        if len(nums)==1:\n            if(nums[0]==target):\n                return [0,0]\n            else:\n                return [-1,-1]\n\n        first = self.getFirstOccurence(nums,target)\n        if first==-1:\n            return [-1,-1]\n\n        return [first, self.getLastOccurence(nums,target)]\n        \n\n\n    def getFirstOccurence(self, nums, target):\n        l,r = 0, len(nums)-1\n        found = False\n        ans = -1\n        while(l<=r):\n            mid = (l+r)//2\n            if(nums[mid]<target):\n                l = mid+1\n            \n            else:\n                if(nums[mid]==target):\n                    found = True\n                ans = mid\n                r = mid-1\n        if not found:\n            return -1\n        return ans\n\n    def getLastOccurence(self, nums, target):\n        \"\"\"\n        TO get index of last occurence,\n        need index of first element greater than target\n        simple binary search with target+1\n        \"\"\"\n        target = target+1\n        l, r = 0, len(nums)-1\n        ans = len(nums)\n        while(l<=r):\n            mid = (l+r)//2\n            if(nums[mid]>=target):\n                ans = mid\n                r = mid-1\n            else:\n                l = mid+1\n        return ans-1\n\n\n        \n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false}