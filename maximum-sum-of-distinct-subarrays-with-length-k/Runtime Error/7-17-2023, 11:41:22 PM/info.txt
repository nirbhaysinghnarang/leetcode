{"id":996930908,"lang":"python3","lang_name":"Python3","time":"1Â week","timestamp":1689617482,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/996930908/","is_pending":"Not Pending","title":"Maximum Sum of Distinct Subarrays With Length K","memory":"N/A","code":"class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        L = 0\n        window_set = {}\n        window_sum = sum(nums[:k])\n        max_sum = window_sum if self.areFreqs1(window_set) else 0\n\n        for R in range(k, len(nums)):\n            window_set[nums[R]] = window_set.get(nums[R], 0) + 1\n            window_set[nums[L]] -= 1\n            if window_set[nums[L]] == 0:\n                del window_set[nums[L]]\n            window_sum += nums[R] - nums[L]\n            L += 1\n            if self.areFreqs1(window_set):\n                max_sum = max(max_sum, window_sum)\n\n        return max_sum\n\n    def areFreqs1(self, d):\n        for key in d:\n            if d[key] > 1:\n                return False\n\n        return True\n","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-sum-of-distinct-subarrays-with-length-k","has_notes":false}