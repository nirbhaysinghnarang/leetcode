{"id":996915876,"lang":"python3","lang_name":"Python3","time":"1Â week","timestamp":1689616439,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/996915876/","is_pending":"Not Pending","title":"Maximum Sum of Distinct Subarrays With Length K","memory":"N/A","code":"from collections import Counter\nclass Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        L = 0\n        window_set = dict(Counter(nums[:k]))\n        max_sum = sum(nums[:k]) if self.areFreqs1(window_set) else 0\n        window_sum = max_sum\n        for R in range(k, len(nums)):\n            if nums[R] in window_set:\n                window_set[nums[R]]+=1\n            else:\n                window_set[nums[R]]=1\n            window_set[nums[L]] = max(0, window_set[nums[L]]-1)\n            window_sum += nums[R]\n            window_sum -= nums[L]\n            L+=1\n            print(window_set, window_sum)\n            if self.areFreqs1(window_set):\n                max_sum = max(max_sum, window_sum)\n        return max_sum\n\n    def areFreqs1(self, d):\n        for key in d:\n            if d[key]>1:\n                return False\n\n        return True","compare_result":"11100111011111111110111111111111111111111111111111111111111111100000000000000000000000000000","title_slug":"maximum-sum-of-distinct-subarrays-with-length-k","has_notes":false}