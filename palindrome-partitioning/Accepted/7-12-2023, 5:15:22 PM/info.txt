{"id":992625875,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1689162322,"status":10,"status_display":"Accepted","runtime":"766 ms","url":"/submissions/detail/992625875/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"33.8 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n\n        lst = []\n\n        def isPal(s):\n            return s == s[::-1]\n\n        def dfs(index, path):\n            if index==len(s):\n                print(path)\n                lst.append(path)\n            for edge in range(index+1, len(s)+1):\n                prefix = s[index:edge]\n                if isPal(prefix):\n                    dfs(edge, path+[prefix])\n                    \n            \n        dfs(0, [])\n        return lst\n","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false}