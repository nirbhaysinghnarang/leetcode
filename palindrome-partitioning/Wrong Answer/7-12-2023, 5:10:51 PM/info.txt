{"id":992623280,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1689162051,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/992623280/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"N/A","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n\n        lst = []\n\n        def isPal(s):\n            return s == s[::-1]\n\n        def dfs(index, path):\n            if index==len(s):\n                lst.append(\"\".join(path[:]))\n            for edge in range(index+1, len(s)+1):\n                if not isPal(s[index:edge+1]):\n                    continue\n                else:\n                    path.append(s[index])\n                    dfs(edge, path)\n                    path.pop()\n            \n        dfs(0, [])\n        return lst\n","compare_result":"01000000000000000000000000000000","title_slug":"palindrome-partitioning","has_notes":false}