{"id":1000740004,"lang":"python3","lang_name":"Python3","time":"3 days, 6 hours","timestamp":1690012833,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000740004/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSame(self, p, q):\n        if not p and not q:\n            return True\n\n        if not p and q:\n            return False\n\n        if p and not q:\n            return False\n\n        return p.val == q.val and self.isSame(p.left, q.left) and self.isSame(p.right, q.right)\n\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n\n        if self.isSame(root, subRoot):\n            return True\n            \n        return self.isSame(root.right, subRoot) or self.isSame(root.left, subRoot)","compare_result":"11111111111001111111111111111111100000000000000000000001000100110010000010000010000000000001000000000000100000001111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false}