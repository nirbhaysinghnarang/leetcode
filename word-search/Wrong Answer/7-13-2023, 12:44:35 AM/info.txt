{"id":992945668,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1689189275,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/992945668/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m = len(board)-1\n        n = len(board[0])-1\n        def dfs(r, c, wordAcc):\n            board[r][c]=-1\n            if len(wordAcc)>len(word):\n                return False\n            if wordAcc==(word):\n                return True\n            if r<0 or r>m or c<0 or c>n:\n                return False\n            moves = [(0,1), (1,0), (-1,0), (0,-1)]\n            for x,y in moves:\n                try:\n                    tmp = board[r+x][c+y]\n                    if board[r+x][c+y]!=-1:\n                        if(dfs(r+x, c+y, wordAcc+board[r][c])):\n                            return True\n                        else:\n                            board[r+x][c+y]=temp\n                except:\n                    continue\n                \n\n                \n\n            \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,\"\") and board[i][j]==word[0]:\n                    return True\n        return False","compare_result":"0010110010011000000001000001000110101000011010111010110000100011000100110001001000001","title_slug":"word-search","has_notes":false}