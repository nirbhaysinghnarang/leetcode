{"id":992937624,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1689188554,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/992937624/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        m = len(board)-1\n        n = len(board[0])-1\n        def dfs(r, c, w, wordIndices):\n            print(w)\n            if board[r][c] not in word:\n                return False\n            if w+board[r][c]==word:\n                return True\n            if w==word:\n                return True\n            if len(w)>len(word):\n                return False\n        \n            moves = [(1,0),(0,1),(0,-1),(-1,0)]\n            for i,j in moves:\n                if [i,j] not in wordIndices:\n                    if dfs(i,j,w+board[r][c], wordIndices+[i,j]):\n                        return True\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,\"\",[]) and board[i][j]==word[0]:\n                    return True\n        return False","compare_result":"0111000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"word-search","has_notes":false}