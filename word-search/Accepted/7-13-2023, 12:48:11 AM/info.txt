{"id":992948129,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1689189491,"status":10,"status_display":"Accepted","runtime":"8140 ms","url":"/submissions/detail/992948129/","is_pending":"Not Pending","title":"Word Search","memory":"16.5 MB","code":"class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        ans = False\n        m, n = len(board[0]), len(board)\n        dir = [[-1, 0], [0, 1], [1, 0], [0, -1]]\n\n        def backtracking(c, r, cnt, visited):\n            if cnt == len(word):\n                nonlocal ans\n                ans = True\n                return\n\n            for x, y in dir:\n                new_c, new_r = c + x, r + y\n                if (new_c < 0 or new_c >= n) or (new_r < 0 or new_r >= m):\n                    continue\n                if board[new_c][new_r] == word[cnt] and [new_c, new_r] not in visited:\n                    backtracking(new_c, new_r, cnt + 1, visited + [[new_c, new_r]])\n\n        for c in range(n):\n            for r in range(m):\n                if ans == False and board[c][r] == word[0]:\n                    backtracking(c, r, 1, [[c, r]])\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false}