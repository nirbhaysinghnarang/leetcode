{"id":975516020,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1687260818,"status":10,"status_display":"Accepted","runtime":"121 ms","url":"/submissions/detail/975516020/","is_pending":"Not Pending","title":"The K Weakest Rows in a Matrix","memory":"16.7 MB","code":"import functools\nfrom typing import List\n\nclass Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        def count_soldiers(mat, r1):\n            cnt = 0\n            for elem in mat[r1]:\n                if elem != 0:\n                    cnt += 1\n                else:\n                    return cnt\n            return cnt  # Added a return statement if all soldiers are present\n        \n        soldiers_dic = {}\n        for i in range(len(mat)):  # Fixed the range to include the last row\n            soldiers_dic[i] = count_soldiers(mat, i)\n\n        def is_weaker(r1, r2):\n            if soldiers_dic[r1] < soldiers_dic[r2]:\n                return -1\n            elif soldiers_dic[r1] > soldiers_dic[r2]:\n                return 1\n            elif r1 < r2:\n                return -1\n            elif r1 > r2:\n                return 1\n            else:\n                return 0\n        \n        rows = list(soldiers_dic.keys())\n        rows = sorted(rows, key=functools.cmp_to_key(is_weaker))\n        return rows[:k]\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"the-k-weakest-rows-in-a-matrix","has_notes":false}