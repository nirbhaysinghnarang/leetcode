{"id":991077171,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1689002573,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/991077171/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"N/A","code":"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        Binary search\n        Algo pseudocode:\n        access middle row [mid]\n\n        if last element of middle row is less than target\n        then left = mid + 1 \n        \n        else right = mid -1\n        \"\"\"\n\n        m = len(matrix)-1\n        n = len(matrix[0])-1\n\n        l, r = 0, m\n\n        while(l<=r):\n            mid = (l+r)//2\n            row = matrix[mid]\n            if self.searchRow(row, target):\n                return True\n            if row[n]<target:\n                l = mid+1\n            else:\n                right = mid-1\n\n\n    def searchRow(self, row: List[int], target: int) -> bool:\n        l, r = 0, len(row)-1\n        while(l<=r):\n            mid = (l+r)//2\n            if(row[mid]==target):\n                return True\n            elif row[mid]>target:\n                r = mid -1\n            else:\n                l = mid +1\n\n        return False","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-a-2d-matrix","has_notes":false}