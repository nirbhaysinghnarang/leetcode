{"id":794156355,"lang":"python","lang_name":"Python","time":"10 months, 2 weeks","timestamp":1662579672,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/794156355/","is_pending":"Not Pending","title":"Isomorphic Strings","memory":"N/A","code":"class Solution(object):\n    \n    def get_key(self, val, dic):\n        for key, value in dic.items():\n            if val == value:\n                return key\n        return -1\n\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        dic = {}\n        for idx in range(len(s)):\n            #iterate over first string\n            #if letter key does not exist, create it.\n            if not(s[idx] in dic):\n                dic[s[idx]] = t[idx]\n            else:              \n                #if letter key exists, see what its prev mapping is.\n                # if it is different, then return false,\n                # if it is the same, do nothing?\n                if(t[idx] in dic.values()):\n                    #if letter has already been mapped to\n                    #see what mapped to it\n                    mapped_from = self.get_key(t[idx], dic)\n                    print(mapped_from)\n                    if mapped_from != t[idx]:\n                        return False\n                if dic[s[idx]]!=t[idx]:\n                    return False\n               \n        return True\n        ","compare_result":"0101100111101101110110001100111110011110111","title_slug":"isomorphic-strings","has_notes":false}