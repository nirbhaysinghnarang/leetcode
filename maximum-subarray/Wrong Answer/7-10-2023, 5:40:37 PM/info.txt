{"id":990941263,"lang":"python3","lang_name":"Python3","time":"2 weeks, 1 day","timestamp":1688991037,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/990941263/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"N/A","code":"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        return max(sum(self.max_subarray_sum(nums)),sum(nums))\n    def max_subarray_sum(self,arr):\n        if not arr:\n            return []\n        if len(arr) == 1:\n            return arr\n\n        midpoint = len(arr) // 2\n        leftPt = 0\n        rightPt = len(arr) - 1\n        left = arr[:midpoint]\n        right = arr[midpoint:]\n\n        maxLeftOnly = self.max_subarray_sum(left)\n        maxRightOnly = self.max_subarray_sum(right)\n        mss_left = sum(maxLeftOnly)\n        mss_right = sum(maxRightOnly)\n        leftSum = -100\n        totalLeft = 0\n        start_mid = -1\n        for i in range(midpoint, leftPt, -1):\n            totalLeft += arr[i]\n            if totalLeft > leftSum:\n                start_mid = i\n                leftSum = totalLeft\n\n        rightSum = -100\n        totalRight = 0\n        end_mid = -1\n        for i in range(midpoint, rightPt+1):\n            totalRight += arr[i]\n            if totalRight > rightSum:\n                rightSum = totalRight\n                end_mid = i\n\n        if mss_left > mss_right and mss_left > leftSum + rightSum:\n            return maxLeftOnly\n\n        if mss_right > mss_left and mss_right > leftSum + rightSum:\n            return maxRightOnly\n\n        return arr[start_mid:end_mid+1]\n\n\n","compare_result":"111111111111111110101101111111111111111111111111111101110101111110111111101111111111111111111111101101011110111111111111011111111010111111111111011111010110110110110111111010011110101111110111101101111111111100","title_slug":"maximum-subarray","has_notes":false}