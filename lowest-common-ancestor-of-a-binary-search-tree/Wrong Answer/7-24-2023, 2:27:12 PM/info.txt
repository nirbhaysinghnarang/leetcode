{"id":1002475254,"lang":"python3","lang_name":"Python3","time":"1 day, 5 hours","timestamp":1690189032,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1002475254/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n\n        #base case\n        if not root:\n            return root\n\n        if p is root or q is root:\n            return root\n\n        if root.left is p and root.right is q:\n            return root\n\n        return self.lowestCommonAncestor(root.left, p, q) or self.lowestCommonAncestor(root.right, p, q)\n        \n\n","compare_result":"111111101001011010100000000111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false}