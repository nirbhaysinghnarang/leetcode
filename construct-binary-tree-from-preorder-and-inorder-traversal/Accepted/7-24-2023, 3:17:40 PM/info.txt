{"id":1002507172,"lang":"python3","lang_name":"Python3","time":"1 day, 4 hours","timestamp":1690192060,"status":10,"status_display":"Accepted","runtime":"217 ms","url":"/submissions/detail/1002507172/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"91.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        if not preorder or not inorder:\n            return None\n        if len(preorder)==1 and len(inorder)==1:\n            return TreeNode(preorder[0],None, None)\n\n\n        root = preorder[0]\n        root_index_in_inorder = inorder.index(root)\n        left_children_in_inorder = inorder[:root_index_in_inorder]\n        right_children_in_inorder = inorder[root_index_in_inorder+1:]\n        left_children_in_preorder = preorder[1:len(left_children_in_inorder)+1]\n        right_children_in_preorder = preorder[len(left_children_in_inorder)+1:]\n\n\n        left_subtree = self.buildTree(left_children_in_preorder, left_children_in_inorder)\n        right_subtree =  self.buildTree(right_children_in_preorder, right_children_in_inorder)\n        return TreeNode(val=root, left=left_subtree, right=right_subtree)\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}