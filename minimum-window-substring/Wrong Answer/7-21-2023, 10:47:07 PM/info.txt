{"id":1000341774,"lang":"python3","lang_name":"Python3","time":"3 days, 20 hours","timestamp":1689959827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1000341774/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"N/A","code":"from collections import Counter\nclass Solution:\n\n    def isIncl(self, hm,t):\n        print(hm, t)\n        for char in t:\n            if not char in hm:\n                return False\n            else:\n                if hm[char]==1:\n                    del hm[char]\n                else:\n                    hm[char]-=1\n        return True\n\n    def minWindow(self, s: str, t: str) -> str:\n\n        L = 0\n        t_counter = Counter(t)\n        window_counter = Counter()\n        min_ss = \"\"\n        min_ss_cnt = float('inf')\n\n        for R in range(len(s)):\n            print(s[L:R])\n            #update counter\n            window_counter[s[R]]+=1\n            #shrink window while condition is met\n            while self.isIncl(window_counter, t):\n                print(s[L:R]+\"HELLO\")\n                if R-L+1 < min_ss_cnt:\n                    string = s[L:R]\n                    min_ss_cnt = R-L+1\n                    min_ss = string\n                if window_counter[s[L]]==1:\n                    del window_counter[s[L]]\n                else:\n                    window_counter[s[L]]-=1\n        \n                L-=1\n\n\n        return min_ss\n\n\n\n\n        ","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"minimum-window-substring","has_notes":false}