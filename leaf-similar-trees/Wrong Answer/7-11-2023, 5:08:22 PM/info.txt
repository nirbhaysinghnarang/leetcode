{"id":991777613,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1689075502,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/991777613/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        return self.getSequence(root1, [])==self.getSequence(root2, [])\n    \n    def isLeaf(self, root):\n        return root.left is None and root.right is None\n    \n    def getSequence(self, root, sequence):\n        if root is None:\n            return []\n        \n        if self.isLeaf(root):\n            sequence.append(root)\n            return sequence\n\n        leftSeq = self.getSequence(root.left, sequence)\n        rightSeq = self.getSequence(root.right, sequence)\n        print (leftSeq)\n        return leftSeq + rightSeq\n\n        \n\n        \n        ","compare_result":"010100110101011101010101010101010101010111","title_slug":"leaf-similar-trees","has_notes":false}