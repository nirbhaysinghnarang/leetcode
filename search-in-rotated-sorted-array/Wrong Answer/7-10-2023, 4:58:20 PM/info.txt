{"id":990916408,"lang":"python3","lang_name":"Python3","time":"2 weeks, 1 day","timestamp":1688988500,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/990916408/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        return self.naive(nums, target)\n        \n\n    def naive(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        Algo: find sublists by finding pivot\n        Run BS to sublists\n        \"\"\"\n\n        l, r = 0, len(nums)\n        pivot = -1\n\n        while(l<=r):\n            mid = (l+r)//2\n            if(nums[mid] <= nums[-1]):\n                pivot = mid\n                r = mid-1\n            else:\n                l = mid+1\n\n        left_ans = self.binary_search(nums[:pivot], target)\n\n        right_ans = self.binary_search(nums[pivot:], target)+len(nums[:pivot])\n\n        if (left_ans == -1 and right_ans!=-1):\n            return right_ans\n        elif (left_ans!=-1 and right_ans==-1):\n            return left_answer\n        return -1\n\n\n    \n    def binary_search(self, nums, target):\n        l, r = 0, len(nums)-1\n        while(l<=r):\n            mid = (l+r)//2\n            if(nums[mid]==target):\n                return mid\n            elif (nums[mid]>target):\n                r = mid-1\n            else:\n                l = mid+1\n        return -1\n            \n\n\n","compare_result":"101111111101000111111101000000101000110000011111101001110011010110010101111111010111111000011011001000101001100110010011011101000110000010101010110100011000000000000100001101000000000000000001000","title_slug":"search-in-rotated-sorted-array","has_notes":false}